{"version":3,"sources":["../static/js/profile.04c9f7d2.chunk.js","app/routes/profile/index.js","../node_modules/babel-runtime/regenerator/index.js","../node_modules/regenerator-runtime/runtime-module.js","../node_modules/regenerator-runtime/runtime.js"],"names":["webpackJsonp","146","module","__webpack_exports__","__webpack_require__","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_asyncToGenerator","fn","gen","apply","this","arguments","Promise","resolve","reject","step","key","arg","info","error","done","then","err","defineProperty","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default","n","__WEBPACK_IMPORTED_MODULE_1_react__","__WEBPACK_IMPORTED_MODULE_1_react___default","__WEBPACK_IMPORTED_MODULE_2_redux__","__WEBPACK_IMPORTED_MODULE_3_react_redux__","__WEBPACK_IMPORTED_MODULE_4_react_frontload__","__WEBPACK_IMPORTED_MODULE_5__components_page__","__WEBPACK_IMPORTED_MODULE_6__modules_profile__","_createClass","defineProperties","target","props","i","length","descriptor","protoProps","staticProps","_this","frontload","a","_callee","wrap","_context","prev","next","getCurrentProfile","match","params","id","abrupt","sent","stop","_x","_ref","Profile","_Component","getPrototypeOf","removeCurrentProfile","nextProps","_props$currentProfile","currentProfile","name","image","createElement","title","description","src","alt","style","width","mapStateToProps","state","profile","mapDispatchToProps","dispatch","onMount","onUpdate","147","exports","148","g","Function","hadRuntime","regeneratorRuntime","getOwnPropertyNames","indexOf","oldRuntime","undefined","e","149","global","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","makeInvokeMethod","tryCatch","obj","type","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","method","AsyncIterator","invoke","record","result","hasOwn","__await","unwrapped","enqueue","callInvokeWithMethodAndArg","previousPromise","GenStateSuspendedStart","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","_sent","dispatchException","GenStateSuspendedYield","iterator","return","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","Op","hasOwnProperty","$Symbol","Symbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","displayName","isGeneratorFunction","genFun","ctor","mark","awrap","async","iter","toString","keys","object","reverse","pop","skipTempReset","charAt","slice","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield"],"mappings":"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","file":"static/js/profile.04c9f7d2.chunk.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 146:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__ = __webpack_require__(147);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_redux__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_react_redux__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_react_frontload__ = __webpack_require__(51);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_react_frontload___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_react_frontload__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_page__ = __webpack_require__(50);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__modules_profile__ = __webpack_require__(52);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _this=this;function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{return Promise.resolve(value).then(function(value){step(\"next\",value);},function(err){step(\"throw\",err);});}}return step(\"next\");});};}var frontload=function(){var _ref=_asyncToGenerator(/*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee(props){return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return props.getCurrentProfile(+props.match.params.id);case 2:return _context.abrupt('return',_context.sent);case 3:case'end':return _context.stop();}}},_callee,_this);}));return function frontload(_x){return _ref.apply(this,arguments);};}();var Profile=function(_Component){_inherits(Profile,_Component);function Profile(){_classCallCheck(this,Profile);return _possibleConstructorReturn(this,(Profile.__proto__||Object.getPrototypeOf(Profile)).apply(this,arguments));}_createClass(Profile,[{key:'componentWillUnmount',value:function componentWillUnmount(){this.props.removeCurrentProfile();}},{key:'shouldComponentUpdate',value:function shouldComponentUpdate(nextProps){if(nextProps.match.params.id!==this.props.match.params.id){this.props.getCurrentProfile(+nextProps.match.params.id);}return true;}},{key:'render',value:function render(){var _props$currentProfile=this.props.currentProfile,name=_props$currentProfile.name,id=_props$currentProfile.id,image=_props$currentProfile.image;return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_5__components_page__[\"a\" /* default */],{id:'profile',title:name,description:'This is user profile number '+id,image:image},__WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('p',null,__WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('b',null,'Name:'),' ',name),__WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('p',null,__WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('b',null,'ID:'),' ',id),__WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement('img',{src:image,alt:name,style:{width:'400px'}}));}}]);return Profile;}(__WEBPACK_IMPORTED_MODULE_1_react__[\"Component\"]);var mapStateToProps=function mapStateToProps(state){return{currentProfile:state.profile.currentProfile};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return Object(__WEBPACK_IMPORTED_MODULE_2_redux__[\"b\" /* bindActionCreators */])({getCurrentProfile:__WEBPACK_IMPORTED_MODULE_6__modules_profile__[\"b\" /* getCurrentProfile */],removeCurrentProfile:__WEBPACK_IMPORTED_MODULE_6__modules_profile__[\"c\" /* removeCurrentProfile */]},dispatch);};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(__WEBPACK_IMPORTED_MODULE_3_react_redux__[\"connect\"])(mapStateToProps,mapDispatchToProps)(Object(__WEBPACK_IMPORTED_MODULE_4_react_frontload__[\"frontloadConnect\"])(frontload,{onMount:true,onUpdate:false})(Profile)));\n\n/***/ }),\n\n/***/ 147:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(148);\n\n\n/***/ }),\n\n/***/ 148:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(149);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n/***/ }),\n\n/***/ 149:\n/***/ (function(module, exports) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/profile.04c9f7d2.chunk.js","import React, { Component } from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { frontloadConnect } from 'react-frontload';\r\nimport Page from '../../components/page';\r\n\r\nimport {\r\n  getCurrentProfile,\r\n  removeCurrentProfile\r\n} from '../../../modules/profile';\r\n\r\nconst frontload = async props =>\r\n  await props.getCurrentProfile(+props.match.params.id);\r\n\r\nclass Profile extends Component {\r\n  componentWillUnmount() {\r\n    this.props.removeCurrentProfile();\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps) {\r\n    if (nextProps.match.params.id !== this.props.match.params.id) {\r\n      this.props.getCurrentProfile(+nextProps.match.params.id);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    const { name, id, image } = this.props.currentProfile;\r\n\r\n    return (\r\n      <Page\r\n        id=\"profile\"\r\n        title={name}\r\n        description={`This is user profile number ${id}`}\r\n        image={image}\r\n      >\r\n        <p>\r\n          <b>Name:</b> {name}\r\n        </p>\r\n        <p>\r\n          <b>ID:</b> {id}\r\n        </p>\r\n        <img src={image} alt={name} style={{ width: '400px' }} />\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  currentProfile: state.profile.currentProfile\r\n});\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators({ getCurrentProfile, removeCurrentProfile }, dispatch);\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(\r\n  frontloadConnect(frontload, {\r\n    onMount: true,\r\n    onUpdate: false\r\n  })(Profile)\r\n);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/routes/profile/index.js","module.exports = require(\"regenerator-runtime\");\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/regenerator/index.js\n// module id = 147\n// module chunks = 0","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/regenerator-runtime/runtime-module.js\n// module id = 148\n// module chunks = 0","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/regenerator-runtime/runtime.js\n// module id = 149\n// module chunks = 0"],"sourceRoot":""}